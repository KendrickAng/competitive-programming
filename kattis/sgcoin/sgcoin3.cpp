#include <iostream>
#include <map>

using namespace std;

// assuming that output hash is 990000000
map<long, long> ansMap = {
    {10000000, 819999335},
    {20000000, 649999349},
    {30000000, 479999363},
    {40000000, 309999377},
    {50000000, 139999391},
    {60000000, 969999412},
    {70000000, 799999426},
    {80000000, 629999440},
    {90000000, 459999454},
    {100000000, 289999468},
    {110000000, 119999482},
    {120000000, 949999503},
    {130000000, 779999517},
    {140000000, 609999531},
    {150000000, 439999545},
    {160000000, 269999559},
    {170000000, 99999573},
    {180000000, 929999594},
    {190000000, 759999608},
    {200000000, 589999622},
    {210000000, 419999636},
    {220000000, 249999650},
    {230000000, 79999664},
    {240000000, 909999685},
    {250000000, 739999699},
    {260000000, 569999713},
    {270000000, 399999727},
    {280000000, 229999741},
    {290000000, 59999755},
    {300000000, 889999776},
    {310000000, 719999790},
    {320000000, 549999804},
    {330000000, 379999818},
    {340000000, 209999832},
    {350000000, 39999846},
    {360000000, 869999867},
    {370000000, 699999881},
    {380000000, 529999895},
    {390000000, 359999909},
    {400000000, 189999923},
    {410000000, 19999937},
    {420000000, 849999958},
    {430000000, 679999972},
    {440000000, 509999986},
    {450000000, 340000000},
    {460000000, 170000014},
    {470000000, 28},
    {480000000, 830000049},
    {490000000, 660000063},
    {500000000, 490000077},
    {510000000, 320000091},
    {520000000, 150000105},
    {530000000, 980000126},
    {540000000, 810000140},
    {550000000, 640000154},
    {560000000, 470000168},
    {570000000, 300000182},
    {580000000, 130000196},
    {590000000, 960000217},
    {600000000, 790000231},
    {610000000, 620000245},
    {620000000, 450000259},
    {630000000, 280000273},
    {640000000, 110000287},
    {650000000, 940000308},
    {660000000, 770000322},
    {670000000, 600000336},
    {680000000, 430000350},
    {690000000, 260000364},
    {700000000, 90000378},
    {710000000, 920000399},
    {720000000, 750000413},
    {730000000, 580000427},
    {740000000, 410000441},
    {750000000, 240000455},
    {760000000, 70000469},
    {770000000, 900000490},
    {780000000, 730000504},
    {790000000, 560000518},
    {800000000, 390000532},
    {810000000, 220000546},
    {820000000, 50000560},
    {830000000, 880000581},
    {840000000, 710000595},
    {850000000, 540000609},
    {860000000, 370000623},
    {870000000, 200000637},
    {880000000, 30000651},
    {890000000, 860000672},
    {900000000, 690000686},
    {910000000, 520000700},
    {920000000, 350000714},
    {930000000, 180000728},
    {940000000, 10000742},
    {950000000, 840000763},
    {960000000, 670000777},
    {970000000, 500000791},
    {980000000, 330000805},
    {990000000, 160000819},
    {1000000000, 990000840},
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    long previousHash; cin >> previousHash;

    string transaction = "a";

    cout << transaction << " " << ansMap[previousHash] << endl;
    // 990000000 gives hash 830000000 with token 819
    cout << transaction << " " << 819 << endl;
}

/* MAP GENERATION CODE */
/*
#include <iostream>

using namespace std;

long long H(long long previousHash, string &transaction,
            long long token) {
  long long v = previousHash;
  for (int i = 0; i < transaction.length(); i++) {
    v = (v * 31 + transaction[i]) % 1000000007;
  }
  return (v * 7 + token) % 1000000007;
}

int main () {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    string transaction = "a";

    // precompute table
    for (int i = 1; i <= 100; i++) {
        long long prevHash = i * 10000000;
        for (long token = 0; token < 1000000000; token++) {
            long long hash = H(prevHash, transaction, token);
            if (hash == 990000000) {
                cout << "{" << prevHash << ", " << token << "}," << endl;
                break;
            }
        }
    }

    // precompute next value for 990000000
    for (long token = 0; token < 1000000000; token++) {
        long long hash = H(990000000, transaction, token);
        if (hash / 1000000 * 1000000 == hash) {
            cout << "99000000 " << hash << " " << token << endl;
            break;
        }
    }

    return 0;
}
*/